{"version":3,"sources":["components/Advice.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Advice","props","data","advice","App","useState","setAdvice","changeAdvice","setChangeAdvice","useEffect","fetch","then","res","json","catch","err","console","log","onClick","slip","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAceA,EAXA,SAACC,GACZ,IAAQC,EAASD,EAATC,KACR,OACI,gCACI,mEACA,4BAAIA,EAAKC,aCmBNC,EAtBH,WAEV,MAA4BC,mBAAS,MAArC,mBAAOF,EAAP,KAAeG,EAAf,KAEA,EAAwCD,oBAAS,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KASA,OAPAC,qBAAU,WACRC,MAAM,qCACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAT,GAAI,OAAII,EAAUJ,MACvBY,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC1B,CAACR,IAGF,qCACC,wBAAQW,QAAS,kBAAKV,GAAiBD,IAAvC,wBACEJ,GAAU,cAAC,EAAD,CAAQD,KAAMC,EAAOgB,WCTtBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.68b4ffcb.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./Advice.scss\"\r\n\r\nconst Advice = (props) => {\r\n    const { data } = props;\r\n    return (\r\n        <div>\r\n            <h1>Best Advices of the Millenium!!!!</h1>\r\n            <p>{data.advice}</p>\r\n        </div>\r\n           \r\n    )\r\n}\r\n\r\nexport default Advice\r\n","import React, { useEffect, useState } from 'react'\nimport \"./App.scss\"\n\nimport Advice from \"./components/Advice\"\n\nconst App = () => {\n\n  const [advice, setAdvice] = useState(null);\n\n  const [changeAdvice, setChangeAdvice] = useState(true);\n\n  useEffect(() => {\n    fetch('https://api.adviceslip.com/advice')\n    .then(res => res.json())\n    .then(data => setAdvice(data))\n    .catch(err => console.log(err))\n  },[changeAdvice]);\n  \n  return (\n   <>\n    <button onClick={()=> setChangeAdvice(!changeAdvice)}>Get Advice</button>\n    { advice && <Advice data={advice.slip} /> }\n   </>\n  )\n\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}